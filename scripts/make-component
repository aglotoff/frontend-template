#!/usr/bin/env node
/* eslint-disable no-console */

// Node Imports
const fs = require('fs');
const path = require('path');
const util = require('util');

// Imports
const minimist = require('minimist');
const Mustache = require('mustache');

// Constants
const COMPONENTS_DIR = './src/components';
const COMPONENT_NAME_REGEXP = /^([a-z][0-9a-z]*)(-[0-9a-z]+)*$/;
const TEMPLATE_DIR = './src/components/templates';

// Promisified Functions
const exists = util.promisify(fs.exists);
const mkdir = util.promisify(fs.mkdir);
const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);

function capitalize(word) {
  return word.substr(0, 1).toUpperCase() + word.substr(1);
}

function getConstructorName(componentName) {
  return componentName
    .split('-')
    .reduce((result, word) => result + capitalize(word), '');
}

function getComponentTitle(componentName) {
  return componentName.replace(/-/g, ' ');
}

async function createDirectory(dirName) {
  const componentExists = await exists(dirName);
  if (componentExists) {
    throw new Error(`Component already exists: ${dirName}`);
  }

  return mkdir(dirName, { recursive: true });
}

async function renderTemplate(templateName, tags, outputPath) {
  const templatePath = path.join(TEMPLATE_DIR, templateName);
  const template = await readFile(templatePath, 'utf8');
  const result = Mustache.render(template.toString(), tags);
  await writeFile(outputPath, result, 'utf8');
}

function renderAllTemplates(dirName, options) {
  const componentName = path.basename(dirName);

  const tags = {
    componentName,
    componentTitle: getComponentTitle(componentName),
    constructorName: getConstructorName(componentName),
  };

  const results = [];
  Object.keys(options.types).forEach((type) => {
    let templateName = `component.${type}.mustache`;
    if (type === 'js' && options.generateClass) {
      templateName = 'component.class.js.mustache';
    }

    const outputPath = path.join(dirName, `${componentName}.${type}`);
    results.push(renderTemplate(templateName, tags, outputPath));

    if (type === 'js') {
      results.push(
        renderTemplate(
          'index.js.mustache',
          tags,
          path.join(dirName, 'index.js')
        )
      );
    }
  });

  return Promise.all(results);
}

async function createComponent(componentPath, options) {
  const dirName = path.join(COMPONENTS_DIR, componentPath);

  const componentName = path.basename(dirName);
  if (!COMPONENT_NAME_REGEXP.test(componentName)) {
    throw new Error(`Invalid component name: ${componentName}`);
  }

  await createDirectory(dirName);
  await renderAllTemplates(dirName, options);
}

async function createAllComponents(components, options) {
  try {
    await Promise.all(components.map((component) => createComponent(
      component,
      options,
    )));
  } catch (err) {
    console.error(err.message);
    process.exit(1);
  }
}

(async () => {
  const usageStr = `
    Usage: make-component COMPONENT... [OPTION]...
    Create one or multiple COMPONENT(s)

    Select implementation technologies:
    -a, --all     Generate .scss, .pug, and .js files (default)
    -s, --scss    Generate a .scss file for component styles
    -p, --pug     Generate a .pug file for component markup
    -j, --js      Generate a .js file for component behavior

    Additional options:
    -c, --class   Generate a JS class definition for the component
    `;

  const parsedArgs = minimist(process.argv.slice(2));

  const components = parsedArgs._;
  if (components.length === 0) {
    console.error(usageStr);
    process.exit(1);
  }

  const options = {
    types: {},
    generateClass: false,
  };

  Object.keys(parsedArgs).forEach((option) => {
    switch (option) {
      case '_':
        break;

      case 'a':
      case 'all':
        options.types = {
          pug: true,
          scss: true,
          js: true,
        };
        break;

      case 'p':
      case 'pug':
        options.types.pug = true;
        break;

      case 's':
      case 'scss':
        options.types.scss = true;
        break;

      case 'j':
      case 'js':
        options.types.js = true;
        break;

      case 'c':
      case 'class':
        options.generateClass = true;
        break;

      default:
        console.error('Uknown option:', option);
        console.error('');
        console.error(usageStr);
        process.exit(1);
    }
  });

  if (Object.keys(options.types).length === 0) {
    options.types = {
      pug: true,
      scss: true,
      js: true,
    };
  }

  await createAllComponents(components, options);
})();
